symbolInfo-> symbolInfo(symbolInfo* SymbolInfo)
			symbolInfo(const string &name, const string &type, const string &typeSpecifier)
			symbolInfo(const string &name, const string &type, const string &typeSpecifier, int size)
			symbolInfo(const string &name, const string &type)
			void setStackOffset(int n){
				this->stackOffset = n;
    }

			int getStackOffset(){
				return this->stackOffset;
    }
			void setName(const string &name)
			const string &getName() const
			void setType()
			const string &getType() const
			void setNext(symbolInfo* next)
			symbolInfo* getNext() const
			void setSize(int size)
			int getSize()
			void setTypeSpecifier(const string &typeSpecifier)
			string getTypeSpecifier()
			void insertDeclaration(symbolInfo* SymbolInfo)
			void setDeclarationList(vector<symbolInfo*> SymbolInfoList)
			vector<symbolInfo*> getDeclarationList()
			void setMethodDefinition(bool methodDefiniton)
			bool isMethodDefinition() const
			void setMethodDeclaration(bool methodDeclaration)
			bool isMethodDeclaration() const
			void setArray(bool array)
			bool isArray() const{
			void insertParameter(symbolInfo* SymbolInfo)
			void setParamList(const vector<symbolInfo*> &paramList)
			const vector<symbolInfo*> &getParamList() const
			

class symbolTable{
    scopeTable* currScopeTable;
    int bucketSize = 2;
    int countScopeTable;
public:
    symbolTable(int bucketSize){
        this->countScopeTable = 1;
        this->bucketSize = bucketSize;
        currScopeTable = new scopeTable(bucketSize,countScopeTable);
        //cout<<"           ukaluka"<<endl;


    }

    ~symbolTable(){
        while(currScopeTable != nullptr){
            scopeTable* parentScopeTable = currScopeTable->getParentScopeTable();
            delete currScopeTable;
            currScopeTable = parentScopeTable;
        }
    }

    void setCurrScopeTable(scopeTable* currScopeTable){
        this->currScopeTable = currScopeTable;

    }

    scopeTable* getCurrScopeTable() const{
        return this->currScopeTable;

    }

    void setBucketSize(int bucketSize){
        this->bucketSize = bucketSize;

    }

    int getBucketSize() const{
        return this->bucketSize;

    }

    /* enter -> exit -> insert-> remove -> lookup -> printCurr-> printAll*/

    void enterScope(){
        scopeTable* newScopeTable = new scopeTable(bucketSize,++countScopeTable);
        newScopeTable->setParentScopeTable(currScopeTable);
        currScopeTable = newScopeTable;
        

//        cout<<"ScopeTable# "<<currScopeTable->getTableId()<<" created"<<endl;


    }

    void exitScope(){
        if(currScopeTable == nullptr) return;
        scopeTable* deleteCurrScopeTable = currScopeTable;
        currScopeTable = currScopeTable->getParentScopeTable();
        if(deleteCurrScopeTable->getParentScopeTable() == nullptr){
            cout<<"ScopeTable# "<<deleteCurrScopeTable->getTableId()<<" cannot be removed"<<endl;
            currScopeTable = deleteCurrScopeTable;
            return;
        }
        cout<<"ScopeTable# "<<deleteCurrScopeTable->getTableId()<<" removed"<<endl;
        delete deleteCurrScopeTable;

    }

    void quitHelp(){
        if(currScopeTable == nullptr) return;
        scopeTable* deleteCurrScopeTable = currScopeTable;
        currScopeTable = currScopeTable->getParentScopeTable();
        cout<<"ScopeTable# "<<deleteCurrScopeTable->getTableId()<<" removed"<<endl;
        delete deleteCurrScopeTable;
        


    }

    void quitScope(){
        if(currScopeTable == nullptr) return;
        while(currScopeTable != nullptr ){
            cout<<"\t";
            quitHelp();
        }

    }

    bool insert(symbolInfo symbolInf,ofstream &out){
        if(currScopeTable == nullptr) return false;
        bool success = currScopeTable->insertIntoSymbolTable(symbolInf);
        if(!success){
            out<<"\t"<<symbolInf.getName()<<" already exists in the current ScopeTable"<<endl;
        }
        return success;

    }

    bool insert(symbolInfo* symbolInf){
        if(currScopeTable == nullptr) return false;
        symbolInfo symbolInfInsert(symbolInf);
        bool success = currScopeTable->insertIntoSymbolTable(symbolInf);
        return success;
    }

    bool remove(string key){
        if(currScopeTable == nullptr) return false;
        bool delete_success = currScopeTable->deleteSymbol(key);
        if(!delete_success) cout<<"Not found in the current ScopeTable"<<endl;

        return delete_success;

    }

    symbolInfo* lookup(string key){
        scopeTable* scpTable = currScopeTable;
        while(scpTable != nullptr){
            symbolInfo* sInfo = scpTable->lookupSymbol(key);
            if(sInfo != nullptr) return sInfo;
            scpTable = scpTable->getParentScopeTable();
        }
        cout<<"'"<<key<<"'"<<" not found in any of the ScopeTables"<<endl;
        return nullptr;

    }

    void printCurrScopeTable(){
        //currScopeTable->printScopeTable();

    }

    void printAllScopeTable(ofstream &out){
        scopeTable* curr = currScopeTable;
        while(curr != nullptr){
            curr->printScopeTable(out);
            curr = curr->getParentScopeTable();
        }

    }

class scopeTable{
private:
    int tableId = 0; 
    int bucketSize;//numBuckets
    symbolInfo** hashTable;
    scopeTable* parentScope = nullptr;
public:
    scopeTable(int bucketSize,int n){
        tableId = n;
        this->bucketSize = bucketSize;
        hashTable = new symbolInfo*[bucketSize];
        for(int i=0; i<bucketSize; ++i){
            hashTable[i] = nullptr;
        }
        cout <<"\t"<< "ScopeTable# " << tableId << " created" << endl;
        //tableId = 1;
    }

    virtual ~scopeTable(){
        //debug
        cout<<"In scopeTable destructor"<<endl;
        for(int i=0; i<bucketSize; ++i){
            //if(hashTable[i] != nullptr) delete hashTable[i];
            symbolInfo* cur = hashTable[i];
            while(cur != nullptr){
                symbolInfo* sInfo = cur->getNext();
                delete cur;
                cur = sInfo;    
            }
        }
        delete[] hashTable;
    }

    void setHashTable(symbolInfo** hashTable){
        this->hashTable = hashTable;

    }

    symbolInfo** getHashTable() const{
        return this->hashTable;

    }

    /*
    Insert_into_symbol_table  -> lookup -> delete -> print
    */
    void setBucketSize(int bucketSize){
        this->bucketSize = bucketSize;

    }

    int getBucketSize() const{
        return this->bucketSize;
    }


    unsigned long getHash(string str){
        unsigned long hash = 0;
        unsigned long i =0;
        unsigned long len = str.length();
        for(i=0; i< len; ++i){
            hash = ((str[i]) + (hash << 6) + (hash << 16) - hash)%bucketSize;
        }

        return hash%this->bucketSize;

    }

    
    //check whether the symbol already in scopeTable
    symbolInfo* insertHelp(string key){
        int index = getHash(key);
        symbolInfo* symbolInfHash = hashTable[index];
        int idx = 0;
        while(symbolInfHash != nullptr){
            if(symbolInfHash->getName() == key){
                //cout<<"'"<<key<<"'"<<" found in ScopeTable# "<<tableId<<" at position "<<index+1<<", "<<idx+1<<endl;
                return symbolInfHash;
            }
            symbolInfHash = symbolInfHash->getNext();
            idx++;
        }
        return nullptr;

    }

    bool insertIntoSymbolTable(symbolInfo symbolInf){
        string name, type;
        name = symbolInf.getName();
        type = symbolInf.getType();

        if(insertHelp(name) != nullptr){
            cout<<"'"<<symbolInf.getName()<<"' "<<" already exists in the current ScopeTable"<<endl;
            return false;
        }
        int index = getHash(name);
        symbolInfo* newSymbolInf = new symbolInfo(symbolInf);
        int incr = 0;
        if(hashTable[index] == nullptr) hashTable[index] = newSymbolInf;
        else{
            symbolInfo* symbolInfHash = hashTable[index];
            while(symbolInfHash->getNext() != nullptr){
                symbolInfHash = symbolInfHash->getNext(); incr++;
            }
            incr++;
            symbolInfHash->setNext(newSymbolInf);
        }
        cout<<"Inserted in ScopeTable# "<<tableId<<" at position "<<index+1<<", "<<incr+1<<" "<<name<<" "<<type<<" "<<symbolInf.getTypeSpecifier()<<" "<<symbolInf.getDeclarationList().size()<<" "<<symbolInf.getParamList().size()<<endl;
        return true;



    }

    symbolInfo* lookupSymbol(string key){
        int index = getHash(key);
        symbolInfo* symbolInfHash = hashTable[index];
        int idx = 0;
        while(symbolInfHash != nullptr){
            if(symbolInfHash->getName() == key){
                cout<<"'"<<key<<"'"<<" found in ScopeTable# "<<tableId<<" at position "<<index+1<<", "<<idx+1<<endl;
                return symbolInfHash;
            }
            symbolInfHash = symbolInfHash->getNext();
            idx++;
        }
        return nullptr;

    }

    bool deleteSymbol(string key){
        int index = getHash(key);
        int position = 0;
        symbolInfo* symbolInfHash = hashTable[index];
        if(symbolInfHash == nullptr) return false;
        else if(symbolInfHash->getName() == key){
            cout<<"Deleted "<<"'"<<key<<"'"<<" from ScopeTable# "<<tableId<<" at position "<< index+1<<", "<<position+1<<endl;
            hashTable[index] = symbolInfHash->getNext();
            delete symbolInfHash;
            return true;
        }

        symbolInfo* symbol = symbolInfHash;
        while(symbolInfHash != nullptr){
            if(symbolInfHash->getName() == key){
                symbol->setNext(symbolInfHash->getNext());
                cout<<"Deleted "<<"'"<<key<<"'"<<" from ScopeTable# "<<tableId<<" at position "<< index+1<<", "<<position+1<<endl;
                delete symbolInfHash;
                return true;
            }
            position++;
            symbol = symbolInfHash;
            symbolInfHash = symbolInfHash->getNext();
        }
        return false;

    }

    void printScopeTable(ofstream &out){
        
        out<<"\t"<<"ScopeTable# "<<tableId<<endl;
        for(int i=0; i<bucketSize; ++i){
            symbolInfo* head = hashTable[i];
            if(head == nullptr) continue;
            out<<"\t";
            out<<i+1<<"--> ";
            while(head != nullptr){
                out<<"<"<<head->getName()<<","<<head->getType()<<"> ";
                head = head->getNext();
            }
            out<<endl;
        }
        //cout<<endl;

    }

    void setTableId(int tableId){
        this->tableId = tableId;
    }

    int getTableId() const{
        return this->tableId;
    }

    void setParentScopeTable(scopeTable* parentScope){
        this->parentScope = parentScope;

    }

    scopeTable* getParentScopeTable() const{
        return this->parentScope;

    }

};
#Error
Line# 3: Syntax error at parameter list of function definition // -> Syntax error 1th parameter's name not given in function definition of var
Line# 9: Syntax error at declaration list of variable declaration // ->Syntax error
Line# 10: Syntax error at expression of expression statement // ->Syntax error
Line# 18: Undeclared function 'var' //-> Undeclared function var

Line# 20: Redefinition of parameter 'a' //-> Multiple declaration of a in parameter
Line# 24: Conflicting types for 'foo3' //-> Return type mismatch with function declaration in function foo3
Line# 28: 'z' redeclared as different kind of symbol //-> Multiple declaration of z
Line# 32: Conflicting types for 'var' -> Total number of arguments mismatch with declaration in function var
Line# 42: Variable or field 'e' declared void //done -> Variable type cannot be void
Line# 43: Conflicting types for'a' -> Multiple declaration of a
Line# 43: Conflicting types for'c' -> Multiple declaration of c
Line# 45: Type mismatch for argument 1 of 'func' //-> 1th argument mismatch in function func
Line# 45: Type mismatch for argument 2 of 'func' //
Line# 48: Type mismatch for argument 2 of 'correct_foo' //-> Type mismatch, c is an array
Line# 49: Too few arguments to function 'correct_foo' // -> Total number of arguments mismatch in function correct_foo
Line# 50: Too many arguments to function 'correct_foo' //
Line# 52: Undeclared variable 'k' // -> Undeclared variable k
Line# 53: 'b' is not an array // -> b not an array
Line# 54: Array subscript is not an integer// -> Expression inside third brackets not an integer
Line# 55: Void cannot be used in expression // ->Void function used in expression
Line# 58: Void cannot be used in expression  //
Line# 59: Warning: possible loss of data in assignment of FLOAT to INT
Line# 60: Warning: division by zero i=0f=1Const=0 // ->Modulus by Zero
Line# 61: Operands of modulus must be integers // -> Non-Integer operand on modulus operator
Line# 63: Undeclared function 'foo5' //-> Undeclared function foo5
Line# 68: Undeclared variable 'h' // -> Undeclared variable h
Line# 68: Undeclared function 'printf' //

errorout<<"Line# "<<totalLine<<": "<<errorMessage<<" "<<"'"<<error<<"'"<<"\n";

errorout<<"Line# "<<totalLine<<": "<<errorMessage<<"\n";

errorout<<"Line# "<<totalLine<<": "<<"'"<<error<<"' "<<errorMessage<<"\n";